// src/components/FeedbackDialog.tsx

import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useState } from "react";
import { ISSUE_TYPES, IssueId } from "@/types/feedbackTypes";
import useInputStore from "@/store/useInputStore";
import { Card } from "@/components/ui/card";
import { FEEDBACK_ASSIST_RESPONSE_FORMAT_FULL } from "@/lib/prompts/feedback-assist-response-format-full";
import useSearchStore from "@/store/useSearchStore";

interface FeedbackDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (note: string, issues: IssueId[]) => void;
  queryText: string;
}

export function FeedbackDialog({
  open,
  onOpenChange,
  onSubmit,
  queryText,
}: FeedbackDialogProps): JSX.Element {
  const [noteText, setNoteText] = useState("");
  const [selectedIssues, setSelectedIssues] = useState<string[]>([]);
  const [showAdditionalButtons, setShowAdditionalButtons] = useState(false);
  const { inputValue } = useInputStore();
  const { vibedQueries } = useSearchStore();

  // Find if the feedback is for a vibed query
  const isVibedQuery = vibedQueries.some((vq) => vq.vibedText === queryText);

  // Handle note text changes and show additional buttons when user starts typing
  const handleNoteChange = (
    e: React.ChangeEvent<HTMLTextAreaElement>
  ): void => {
    const text = e.target.value;
    setNoteText(text);

    // Show additional buttons if user has started typing
    setShowAdditionalButtons(text.length > 0);
  };

  const handleSubmit = (): void => {
    onSubmit(noteText, selectedIssues as IssueId[]);
    setNoteText("");
    setSelectedIssues([]);
    setShowAdditionalButtons(false);
    onOpenChange(false);
  };

  const [isLoadingAssistance, setIsLoadingAssistance] = useState(false);
  const [showAssistanceModal, setShowAssistanceModal] = useState(false);
  const [editableComments, setEditableComments] = useState("");
  const [useTemplate, setUseTemplate] = useState(false);
  const [showTemplatePreview, setShowTemplatePreview] = useState(false);

  // Prepare context for assistance request and show the preview modal
  const handleFeedbackAssistance = (): void => {
    // Initialize editable comments with current noteText
    setEditableComments(noteText);
    // Show the modal
    setShowAssistanceModal(true);
  };

  // Send the actual API request with user-reviewed context
  const requestFeedbackAssistance = async (): Promise<void> => {
    setIsLoadingAssistance(true);
    setShowAssistanceModal(false);

    try {
      // Create the context object with all needed data
      const context = createApiContext();

      const response = await fetch("/api/feedback-assist", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(context),
      });

      if (!response.ok) {
        throw new Error("Network response was not ok");
      }

      const data = await response.json();

      if (data.assistedFeedback) {
        // Update the comment field with the AI-assisted feedback
        setNoteText(data.assistedFeedback);
      } else {
        console.error("No assisted feedback returned");
      }
    } catch (error) {
      console.error("Error fetching feedback assistance:", error);
    } finally {
      setIsLoadingAssistance(false);
    }
  };

  const handleGitHubIssue = (): void => {
    // Open GitHub issue form
    window.open(
      "https://github.com/archignes/vibesearching/issues/new",
      "_blank"
    );
  };

  const toggleIssue = (issueId: string): void => {
    setSelectedIssues((prev) =>
      prev.includes(issueId)
        ? prev.filter((id) => id !== issueId)
        : [...prev, issueId]
    );
  };

  // Helper function to create the context for the API request - used by both preview and API
  const createApiContext = (): {
    inputQuery: string;
    targetQuery: string;
    selectedIssues: string[];
    userComments: string;
    useTemplate: boolean;
    devMode: boolean;
    selectedIssuesText: string;
    previewText: string;
  } => {
    // Convert issue IDs to labels
    const issueLabels = selectedIssues
      .map((id) => ISSUE_TYPES[id as IssueId]?.label || id)
      .join(", ");

    return {
      inputQuery: inputValue,
      targetQuery: queryText,
      selectedIssues,
      userComments: editableComments,
      useTemplate: useTemplate,
      devMode: process.env.NEXT_PUBLIC_DEV_MODE === "true",
      // Additional display-only fields
      selectedIssuesText: issueLabels || "None selected",
      previewText: `I need help writing detailed feedback about a search suggestion I didn't find helpful. These suggestions are "VIBED" queries, which means they are suggestions that are generated by the AI based on the user's query and intended to not match the exact intent, but they can still be particularly unhelpful for the user.

Original input query: "${inputValue}"

Suggested query I didn't like: "${queryText}"

I was given the choice to select issues from a list (${Object.values(
        ISSUE_TYPES
      )
        .map((issue) => issue.label)
        .join(", ")}).

I selected: ${issueLabels || "None of them"}

My initial comments:`,
    };
  };

  return (
    <>
      {/* Main Feedback Dialog */}
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Feedback - Not Helpful</DialogTitle>
          </DialogHeader>

          {/* Context section */}
          <div className="mb-6 space-y-3">
            {/* Original input query */}
            <div>
              <div className="text-sm font-medium mb-1">Input Query:</div>
              <Card className="p-3 text-sm bg-gray-50 dark:bg-gray-800">
                {inputValue}
              </Card>
            </div>

            {/* Query receiving feedback */}
            <div>
              <div className="text-sm font-medium mb-1 flex items-center">
                <span className="text-red-500 mr-2">â˜…</span>
                Query you&apos;re providing feedback on:
              </div>
              <Card className="p-3 text-sm border-red-200 dark:border-red-800">
                {queryText}
              </Card>
            </div>

            {/* Other vibed queries if this is a vibed query */}
            {isVibedQuery && vibedQueries.length > 1 && (
              <div>
                <div className="text-sm font-medium mb-1">
                  Other suggested queries:
                </div>
                <div className="space-y-2 max-h-[150px] overflow-y-auto">
                  {vibedQueries
                    .filter((vq) => vq.vibedText !== queryText)
                    .map((vq) => (
                      <Card
                        key={vq.id}
                        className="p-2 text-sm bg-gray-50 dark:bg-gray-800"
                      >
                        {vq.vibedText}
                      </Card>
                    ))}
                </div>
              </div>
            )}
          </div>

          {/* Issue selection - simplified approach */}
          <div className="mb-4">
            <div className="text-sm font-medium mb-2">
              What&apos;s the issue?
            </div>
            <div className="flex flex-wrap gap-2 mb-4">
              {Object.values(ISSUE_TYPES).map((issue) => {
                const isSelected = selectedIssues.includes(issue.label);
                return (
                  <button
                    key={issue.label}
                    onClick={() => toggleIssue(issue.label)}
                    className={`px-3 py-1.5 rounded-md text-sm transition-colors ${
                      isSelected
                        ? "bg-gray-700 text-white dark:bg-gray-200 dark:text-gray-800"
                        : "bg-gray-100 hover:bg-gray-200 text-gray-800 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700"
                    }`}
                  >
                    {issue.label}
                  </button>
                );
              })}
            </div>
          </div>

          {/* Note textarea */}
          <div>
            <div className="text-sm font-medium mb-2">Comments?</div>
            <Textarea
              placeholder="What would have been more helpful? (optional)"
              value={noteText}
              onChange={handleNoteChange}
              className="min-h-[100px]"
            />
          </div>

          {/* Additional buttons that appear when user starts typing */}
          {showAdditionalButtons && (
            <div className="flex gap-2 mt-2">
              <Button
                variant="outline"
                className="text-xs sm:text-sm flex-1 border-purple-200 text-purple-700 hover:bg-purple-50 hover:text-purple-800 dark:border-purple-800 dark:text-purple-400 dark:hover:bg-purple-900/30"
                onClick={handleFeedbackAssistance}
              >
                Ask for feedback assistance
              </Button>
              <Button
                variant="outline"
                className="text-xs sm:text-sm flex-1 border-blue-200 text-blue-700 hover:bg-blue-50 hover:text-blue-800 dark:border-blue-800 dark:text-blue-400 dark:hover:bg-blue-900/30"
                onClick={handleGitHubIssue}
              >
                Submit public issue on GitHub
              </Button>
            </div>
          )}

          <DialogFooter className="mt-4">
            <Button variant="outline" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
            <Button
              onClick={handleSubmit}
              className="bg-red-600 hover:bg-red-700"
            >
              Submit feedback
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Assistance Preview Dialog */}
      <Dialog open={showAssistanceModal} onOpenChange={setShowAssistanceModal}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Assistance Request Preview</DialogTitle>
          </DialogHeader>

          <div className="space-y-4">
            <div>
              <div className="text-sm font-medium mb-2">
                Here&apos;s what we&apos;ll send to the AI assistant:
              </div>
              <Card className="p-3 bg-gray-50 dark:bg-gray-800 text-xs whitespace-pre-line">
                {createApiContext().previewText}
              </Card>
            </div>

            <div>
              <div className="text-sm font-medium mb-2">
                Edit your comments (optional):
              </div>
              <Textarea
                placeholder="Add or modify your comments here..."
                value={editableComments}
                onChange={(e) => setEditableComments(e.target.value)}
                className="min-h-[100px] text-sm"
              />
            </div>

            <div className="flex flex-col gap-2">
              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  id="useTemplate"
                  checked={useTemplate}
                  onChange={(e) => setUseTemplate(e.target.checked)}
                  className="h-4 w-4 rounded border-gray-300"
                />
                <label htmlFor="useTemplate" className="text-sm font-medium">
                  Use structured template format
                </label>
                <button
                  onClick={() => setShowTemplatePreview(!showTemplatePreview)}
                  className="ml-2 text-xs text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
                >
                  {showTemplatePreview ? "Hide template" : "Show template"}
                </button>
              </div>

              {showTemplatePreview && (
                <Card className="p-3 text-xs bg-gray-50 dark:bg-gray-800 whitespace-pre-line border-dashed border-blue-200 dark:border-blue-800">
                  <div className="font-bold">Template format:</div>
                  <div className="mt-2">
                    {FEEDBACK_ASSIST_RESPONSE_FORMAT_FULL.replace(
                      "Format your response in markdown using this template:",
                      ""
                    )
                      .trim()
                      .split("\n")
                      .map((line, i) => (
                        <div key={i}>
                          {line.includes("{") && line.includes("}") ? (
                            <span className="text-gray-500">{line}</span>
                          ) : (
                            line
                          )}
                        </div>
                      ))}
                  </div>
                </Card>
              )}
            </div>
          </div>

          <DialogFooter className="gap-2">
            <Button
              variant="outline"
              onClick={() => setShowAssistanceModal(false)}
            >
              Cancel
            </Button>
            <Button
              onClick={requestFeedbackAssistance}
              disabled={isLoadingAssistance}
              className="bg-purple-600 hover:bg-purple-700"
            >
              {isLoadingAssistance ? (
                <>
                  <svg
                    className="animate-spin -ml-1 mr-2 h-4 w-4"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle
                      className="opacity-25"
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      strokeWidth="4"
                    ></circle>
                    <path
                      className="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    ></path>
                  </svg>
                  Generating...
                </>
              ) : (
                "Generate Feedback"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
